*** README TEMA1 ASC ***

** Organizare **
    -ThreadPool:
ThreadPool ul are o coada de task uri ce vor fi executate si mentine starea fiecarui task.
In constructor se pornesc thread urile. Un thread va incepe sa ia task uri din coada doar dupa
ce este notificat ca datele au fost citite de DataIngestor. Odata ce un task a fost luat din
coada de un thread, este executat si rezultatul este stocat intr un fisier ce ii contine in nume
job_id ul. Clasa ThreadPool mai are metode si pentru adaugarea unui task in coada, oprire graceful
(Este bagat in coada cate un element null pentru fiecare thread, thread ul se opreste dupa ce
scoate None din coada => acest mecanism permite executarea tuturor task urilor ce sunt inca in
coada la primirea semnalului de shutdown), get_num_jobs, get_jobs (returneaza starea job urilor).
    -DataIngestor:
Se ocupa de citirea datelor + contine metode de selectie a datelor (statistici). Semnaleaza spre
ThreaPool momentul in care s a terminat citirea datelor.
    -Routes:
Raspunde la request urile primite. Daca se cere o statistica, adauga in coada acest job, raspunde
la celelalte request uri in functie de ruta.
    -In folder ul unittests se afla si teste unitare pentru rutele neverificate de checker, dar care
trebuie implementate conform enuntului.
    -Eventuale erori si date legate de ce se intampla in server sunt logate
    -Elemente sincronizare: un event pentru semnalizarea ca datele au fost citite, Queue ->
-> coada thread-safe

* Utilitate *
Am invatat multe din aceasta tema, dat enuntul putea fi mai clar in anumite aspecte.

* Eficienta *
Solutia gasita este destul de eficienta si se pot adauga usor functionalitati extra, statistici
extra ce ar putea fi cerute.

** Implementare **
Au fost implementate toate functionalitatile din enunt.
Dificultati intampinate: Laboratoarele nu au avut mare legatura cu tema in sensul pregatirii
pentru aceasta, dar per total o tema f interesanta.

** Resurse **
Laboratoare ASC
Programiz -> sintaxa, concepte python
Documentatie pandas
Python Docs



